/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, CrudForm, User } from "@prisma/client";

export class CrudFormServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CrudFormFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrudFormFindManyArgs>
  ): Promise<number> {
    return this.prisma.crudForm.count(args);
  }

  async findMany<T extends Prisma.CrudFormFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrudFormFindManyArgs>
  ): Promise<CrudForm[]> {
    return this.prisma.crudForm.findMany(args);
  }
  async findOne<T extends Prisma.CrudFormFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrudFormFindUniqueArgs>
  ): Promise<CrudForm | null> {
    return this.prisma.crudForm.findUnique(args);
  }
  async create<T extends Prisma.CrudFormCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrudFormCreateArgs>
  ): Promise<CrudForm> {
    return this.prisma.crudForm.create<T>(args);
  }
  async update<T extends Prisma.CrudFormUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrudFormUpdateArgs>
  ): Promise<CrudForm> {
    return this.prisma.crudForm.update<T>(args);
  }
  async delete<T extends Prisma.CrudFormDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrudFormDeleteArgs>
  ): Promise<CrudForm> {
    return this.prisma.crudForm.delete(args);
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.crudForm
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
